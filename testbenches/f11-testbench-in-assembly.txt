102, 313C, Load first         //Loads the value of B into the accumulator (AC).
104, 313E, Load second         //Loads the value of B into the accumulator (AC).\

106, 3140, Loop, Load next  //Loads the value of next into the accumulator.
108, 5140, Clear   //  ???? how do I reset next to 0/.? ????
10A, 113C, Add first
10C, 113E, Add Second
10E, 4140, Store next      // Stores the result of the addition back into the memory location labeled as Prod.

110, 313C, Load first
112, 513D, Clear
114, 113E Add second
116, 413C, Store first

118, 313E, Load second
11A, 513E, Clear
11C, 1140, Add next
11E, 413E, Store second

120, 3142, Load i        //Loads the value of Ctr into the accumulator
122, 1148, Add Negl        //Adds the value of Negl to the accumulator. This effectively subtracts 1 from Ctr.
124, 4142, Store i       //Stores the updated value of Ctr back into its memory location.
126, 6400, Skip 400   // Skips the next instruction if the accumulator is equal to 0. The binary representation of 400 is 0100 0000 0000. This is used as a conditional jump to check if the value in the accumulator (Ctr) is equal to zero.
128, 7106, Jump Loop   //If the accumulator is not equal to zero, this instruction jumps back to the beginning of the loop (Loop label).
13A, 2000, Halt

13C, first, Dec 0
13E, second, Dec 1
140, next, Dec 0
142, i, Dec 2
144, s, Hex 0
146, f, Hex 0
148, Negl, Dec -1
