Address, Value, Code
ORG 100        //This sets the origin of the program to memory address 100
Load first         //Loads the value of B into the accumulator (AC).
Load second         //Loads the value of B into the accumulator (AC).\

Loop, Load next  //Loads the value of next into the accumulator.
Clear   //how do I reset next to 0/.?
Add first
Add Second
Store next      // Stores the result of the addition back into the memory location labeled as Prod.

Load first
Clear
Add second
Store first

Load second
Clear
Add next
Store second

Load i        //Loads the value of Ctr into the accumulator
Add Negl        //Adds the value of Negl to the accumulator. This effectively subtracts 1 from Ctr.
Store i       //Stores the updated value of Ctr back into its memory location.
Skip 400   // Skips the next instruction if the accumulator is equal to 0. The binary representation of 400 is 0100 0000 0000. This is used as a conditional jump to check if the value in the accumulator (Ctr) is equal to zero.
Jump Loop   //If the accumulator is not equal to zero, this instruction jumps back to the beginning of the loop (Loop label).
Halt

first, Dec 0
second, Dec 1
next, Dec 0
i, Dec 2
s, Hex 0
f, Hex 0
Negl, Dec -1



    for (i = 2; i <= 11; i++) {
        next = first + second;
        first = second;
        second = next;
    }

    printf("F11 is %d\n", second);
    return 0;

